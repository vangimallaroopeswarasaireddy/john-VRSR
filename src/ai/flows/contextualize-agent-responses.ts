'use server';

/**
 * @fileOverview This file defines a Genkit flow to contextualize agent responses by incorporating relevant information
 * from previous interactions and user preferences.
 *
 * - `contextualizeAgentResponse` - An async function that accepts an input object and returns a contextualized response.
 * - `ContextualizeAgentResponseInput` - The input type for the `contextualizeAgentResponse` function.
 * - `ContextualizeAgentResponseOutput` - The output type for the `contextualizeAgentResponse` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ContextualizeAgentResponseInputSchema = z.object({
  agentName: z.string().describe('The name of the agent generating the response.'),
  userInput: z.string().describe('The latest user input/query.'),
  agentResponse: z.string().describe('The original response generated by the agent.'),
  contextMemory: z.string().optional().describe('Context memory string that store the history of the conversation.'),
});
export type ContextualizeAgentResponseInput = z.infer<typeof ContextualizeAgentResponseInputSchema>;

const ContextualizeAgentResponseOutputSchema = z.object({
  contextualizedResponse: z.string().describe('The agent response contextualized with user history and preferences.'),
});
export type ContextualizeAgentResponseOutput = z.infer<typeof ContextualizeAgentResponseOutputSchema>;

export async function contextualizeAgentResponse(input: ContextualizeAgentResponseInput): Promise<ContextualizeAgentResponseOutput> {
  return contextualizeAgentResponseFlow(input);
}

const contextualizeAgentResponsePrompt = ai.definePrompt({
  name: 'contextualizeAgentResponsePrompt',
  input: {schema: ContextualizeAgentResponseInputSchema},
  output: {schema: ContextualizeAgentResponseOutputSchema},
  prompt: `You are an AI assistant that contextualizes responses from other AI agents.

The current agent is named {{{agentName}}}.

The user has provided the following input: {{{userInput}}}

The original agent responded with: {{{agentResponse}}}

Context Memory: {{{contextMemory}}}

Given the user's input, the original agent's response, and the context memory,
rewrite the agent's response to be more helpful and relevant to the user.

Your contextualized response:
`,
});

const contextualizeAgentResponseFlow = ai.defineFlow(
  {
    name: 'contextualizeAgentResponseFlow',
    inputSchema: ContextualizeAgentResponseInputSchema,
    outputSchema: ContextualizeAgentResponseOutputSchema,
  },
  async input => {
    const {output} = await contextualizeAgentResponsePrompt(input);
    return output!;
  }
);
