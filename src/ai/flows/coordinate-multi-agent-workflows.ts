'use server';

/**
 * @fileOverview Coordinates multiple AI agents to perform combined workflows.
 *
 * - coordinateMultiAgentWorkflow - A function that coordinates the multi-agent workflow.
 * - CoordinateMultiAgentWorkflowInput - The input type for the coordinateMultiAgentWorkflow function.
 * - CoordinateMultiAgentWorkflowOutput - The return type for the coordinateMultiAgentWorkflow function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CoordinateMultiAgentWorkflowInputSchema = z.object({
  task: z.string().describe('The overall task to be performed by multiple agents.'),
  context: z.string().optional().describe('Context to be shared among agents.'),
});
export type CoordinateMultiAgentWorkflowInput = z.infer<typeof CoordinateMultiAgentWorkflowInputSchema>;

const CoordinateMultiAgentWorkflowOutputSchema = z.object({
  plan: z.string().describe('The execution plan generated by the planning agent.'),
  results: z.record(z.string()).describe('The results from each agent.'),
});
export type CoordinateMultiAgentWorkflowOutput = z.infer<typeof CoordinateMultiAgentWorkflowOutputSchema>;

export async function coordinateMultiAgentWorkflow(
  input: CoordinateMultiAgentWorkflowInput
): Promise<CoordinateMultiAgentWorkflowOutput> {
  return coordinateMultiAgentWorkflowFlow(input);
}

const planningPrompt = ai.definePrompt({
  name: 'planningPrompt',
  input: {
    schema: CoordinateMultiAgentWorkflowInputSchema,
  },
  output: {
    schema: z.object({
      plan: z
        .string()
        .describe(
          'A detailed plan outlining the steps to accomplish the task, including which agent is responsible for each step.'
        ),
    }),
  },
  prompt: `You are a workflow planning agent. Your task is to create a comprehensive plan for coordinating multiple AI agents to achieve the user's goal.

Task: {{{task}}}
Context: {{{context}}}

Consider the following agents:
- Productivity Agent: Manages schedules, reminders, and daily tasks.
- Tutor Agent: Provides academic help and personalized learning.
- Portfolio Agent: Manages and presents user projects, achievements, and profiles interactively.

Your plan should include specific actions for each agent and the order in which they should be executed.  The plan should provide enough detail that a human could execute it, e.g., be specific about the names of functions to be called.

Make sure the plan includes steps that involve communication and coordination between the agents. The plan itself should be thorough and detail oriented. Make sure to include a summary for the plan.

{{#if context}}
  Use this shared context when creating a plan: {{{context}}}
{{/if}}`,
});

const coordinateMultiAgentWorkflowFlow = ai.defineFlow(
  {
    name: 'coordinateMultiAgentWorkflowFlow',
    inputSchema: CoordinateMultiAgentWorkflowInputSchema,
    outputSchema: CoordinateMultiAgentWorkflowOutputSchema,
  },
  async input => {
    const {output: planningOutput} = await planningPrompt(input);

    // Dummy implementation for agent execution
    const results: Record<string, string> = {};

    // TODO: Implement actual agent coordination and execution logic
    results['planning'] = planningOutput?.plan ?? 'No plan generated';
    results['productivity'] = 'Productivity agent placeholder.';
    results['tutor'] = 'Tutor agent placeholder.';
    results['portfolio'] = 'Portfolio agent placeholder.';

    return {
      plan: planningOutput?.plan ?? 'No plan generated',
      results: results,
    };
  }
);
